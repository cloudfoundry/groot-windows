// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/groot-windows/driver"
)

type PrivilegeElevator struct {
	DisableProcessPrivilegesStub        func([]string) error
	disableProcessPrivilegesMutex       sync.RWMutex
	disableProcessPrivilegesArgsForCall []struct {
		arg1 []string
	}
	disableProcessPrivilegesReturns struct {
		result1 error
	}
	disableProcessPrivilegesReturnsOnCall map[int]struct {
		result1 error
	}
	EnableProcessPrivilegesStub        func([]string) error
	enableProcessPrivilegesMutex       sync.RWMutex
	enableProcessPrivilegesArgsForCall []struct {
		arg1 []string
	}
	enableProcessPrivilegesReturns struct {
		result1 error
	}
	enableProcessPrivilegesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PrivilegeElevator) DisableProcessPrivileges(arg1 []string) error {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.disableProcessPrivilegesMutex.Lock()
	ret, specificReturn := fake.disableProcessPrivilegesReturnsOnCall[len(fake.disableProcessPrivilegesArgsForCall)]
	fake.disableProcessPrivilegesArgsForCall = append(fake.disableProcessPrivilegesArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.DisableProcessPrivilegesStub
	fakeReturns := fake.disableProcessPrivilegesReturns
	fake.recordInvocation("DisableProcessPrivileges", []interface{}{arg1Copy})
	fake.disableProcessPrivilegesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PrivilegeElevator) DisableProcessPrivilegesCallCount() int {
	fake.disableProcessPrivilegesMutex.RLock()
	defer fake.disableProcessPrivilegesMutex.RUnlock()
	return len(fake.disableProcessPrivilegesArgsForCall)
}

func (fake *PrivilegeElevator) DisableProcessPrivilegesCalls(stub func([]string) error) {
	fake.disableProcessPrivilegesMutex.Lock()
	defer fake.disableProcessPrivilegesMutex.Unlock()
	fake.DisableProcessPrivilegesStub = stub
}

func (fake *PrivilegeElevator) DisableProcessPrivilegesArgsForCall(i int) []string {
	fake.disableProcessPrivilegesMutex.RLock()
	defer fake.disableProcessPrivilegesMutex.RUnlock()
	argsForCall := fake.disableProcessPrivilegesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *PrivilegeElevator) DisableProcessPrivilegesReturns(result1 error) {
	fake.disableProcessPrivilegesMutex.Lock()
	defer fake.disableProcessPrivilegesMutex.Unlock()
	fake.DisableProcessPrivilegesStub = nil
	fake.disableProcessPrivilegesReturns = struct {
		result1 error
	}{result1}
}

func (fake *PrivilegeElevator) DisableProcessPrivilegesReturnsOnCall(i int, result1 error) {
	fake.disableProcessPrivilegesMutex.Lock()
	defer fake.disableProcessPrivilegesMutex.Unlock()
	fake.DisableProcessPrivilegesStub = nil
	if fake.disableProcessPrivilegesReturnsOnCall == nil {
		fake.disableProcessPrivilegesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disableProcessPrivilegesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PrivilegeElevator) EnableProcessPrivileges(arg1 []string) error {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.enableProcessPrivilegesMutex.Lock()
	ret, specificReturn := fake.enableProcessPrivilegesReturnsOnCall[len(fake.enableProcessPrivilegesArgsForCall)]
	fake.enableProcessPrivilegesArgsForCall = append(fake.enableProcessPrivilegesArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.EnableProcessPrivilegesStub
	fakeReturns := fake.enableProcessPrivilegesReturns
	fake.recordInvocation("EnableProcessPrivileges", []interface{}{arg1Copy})
	fake.enableProcessPrivilegesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PrivilegeElevator) EnableProcessPrivilegesCallCount() int {
	fake.enableProcessPrivilegesMutex.RLock()
	defer fake.enableProcessPrivilegesMutex.RUnlock()
	return len(fake.enableProcessPrivilegesArgsForCall)
}

func (fake *PrivilegeElevator) EnableProcessPrivilegesCalls(stub func([]string) error) {
	fake.enableProcessPrivilegesMutex.Lock()
	defer fake.enableProcessPrivilegesMutex.Unlock()
	fake.EnableProcessPrivilegesStub = stub
}

func (fake *PrivilegeElevator) EnableProcessPrivilegesArgsForCall(i int) []string {
	fake.enableProcessPrivilegesMutex.RLock()
	defer fake.enableProcessPrivilegesMutex.RUnlock()
	argsForCall := fake.enableProcessPrivilegesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *PrivilegeElevator) EnableProcessPrivilegesReturns(result1 error) {
	fake.enableProcessPrivilegesMutex.Lock()
	defer fake.enableProcessPrivilegesMutex.Unlock()
	fake.EnableProcessPrivilegesStub = nil
	fake.enableProcessPrivilegesReturns = struct {
		result1 error
	}{result1}
}

func (fake *PrivilegeElevator) EnableProcessPrivilegesReturnsOnCall(i int, result1 error) {
	fake.enableProcessPrivilegesMutex.Lock()
	defer fake.enableProcessPrivilegesMutex.Unlock()
	fake.EnableProcessPrivilegesStub = nil
	if fake.enableProcessPrivilegesReturnsOnCall == nil {
		fake.enableProcessPrivilegesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.enableProcessPrivilegesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PrivilegeElevator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableProcessPrivilegesMutex.RLock()
	defer fake.disableProcessPrivilegesMutex.RUnlock()
	fake.enableProcessPrivilegesMutex.RLock()
	defer fake.enableProcessPrivilegesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PrivilegeElevator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.PrivilegeElevator = new(PrivilegeElevator)
